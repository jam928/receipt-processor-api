package com.jam.receiptprocessorapi.service

import com.jam.receiptprocessorapi.model.*
import com.jam.receiptprocessorapi.repository.ReceiptRepository
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Service
import java.time.LocalTime
import java.util.*
import kotlin.math.ceil


@Service
class ReceiptService(
    val receiptRepository: ReceiptRepository,
    @Value("\${llm.generated}") private val llmGenerated: Boolean
    ) {
    fun getPoints(receiptId: UUID): PointsResponse {
        val receipt  = receiptRepository.findById(receiptId).get()

        var totalPoints = 0.0

        // calculate points for retailer name
        totalPoints += receipt.retailer.count { it.isLetterOrDigit() }

        // for the 50 points if total is to the nearest dollar
        totalPoints += if (receipt.total.split(".")[1] == "00") 50 else 0

        // 25 points if total is multiple of 0.25
        totalPoints += if (receipt.total.toDouble() % 0.25 == 0.0) 25 else 0

        // calculate for every two items on receipt
        totalPoints += (receipt.items.size / 2)  * 5

        // calculate for description
        for (item in receipt.items) {
            val trimmedDescription = item.shortDescription.trim()
            // check the length of the trimmed description is multiple of 3
            if (trimmedDescription.length % 3 == 0) {
                totalPoints += ceil(item.price.toDouble() * 0.2)
            }
        }

        // if program is generated by llm and total is greater than 10; add 5 points
        totalPoints += if(llmGenerated && receipt.total.toDouble() > 10.00) 5 else 0

        // calculate for purchase date
        totalPoints += if(receipt.purchaseDate.dayOfMonth % 2 != 0) 6 else 0

        val purchaseTime = receipt.purchaseTime

        // 10 points if purchase time is between 2 and 4 pm
        val startTime = LocalTime.of(14, 0) // 2 PM
        val endTime = LocalTime.of(16, 0) // 4 PM

        val isBetween = (purchaseTime.isAfter(startTime) && purchaseTime.isBefore(endTime)) || startTime.equals(purchaseTime) || endTime.equals(purchaseTime)

        totalPoints += if (isBetween) 10 else 0

        val pointsResponse = PointsResponse(totalPoints)
        return pointsResponse
    }

    fun saveReceipt(addReceiptRequest: AddReceiptRequest): AddReceiptResponse {
        val receipt = Receipt(
            retailer = addReceiptRequest.retailer,
            purchaseDate = addReceiptRequest.purchaseDate,
            purchaseTime = addReceiptRequest.purchaseTime,
            total = addReceiptRequest.total
        )
        // add items to receipt model
        addReceiptRequest.items.forEach {
            val item = Item(
                shortDescription = it.shortDescription,
                price = it.price
            )
            item.receipt = receipt
            receipt.items.add(item)
        }
        val savedReceipt = receiptRepository.save(receipt)
        val response = HashMap<String, Any>()
        response["id"] = savedReceipt.id.toString()

        val addReceiptResponse = AddReceiptResponse(id=savedReceipt.id.toString())
        return addReceiptResponse
    }
}